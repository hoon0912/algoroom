import java.util.Comparator;
import java.util.PriorityQueue;

public class heap_42627 {
    public static void main(String[] args) {
        int[][] jobs = {{0,3},{1,9},{2,6}};
        int result = solution(jobs);
        System.out.println(result);
    }

    public static class job {
        private final int requestTime;
        private final int processingTime;
        private int executedTime;

        public job(int requestTime, int processingTime) {
            this.requestTime = requestTime;
            this.processingTime = processingTime;
            this.executedTime = 0;
        }

        public int getExecutedTime() {
            return executedTime;
        }

        public int getProcessingTime() {
            return processingTime;
        }

        public int getRequestTime() {
            return requestTime;
        }

        public void execute() {
            this.executedTime++;
        }

        public boolean isFinished() {
            return this.executedTime == this.processingTime;
        }
    }

    public static int solution(int[][] jobs) {
        int answer = 0;
        PriorityQueue<job> waitQ = new PriorityQueue<>((job o1, job o2) -> (o1.getProcessingTime() >= o2.getProcessingTime())? 1 : -1);
        PriorityQueue<job> jobQ = new PriorityQueue<>((job o1, job o2) -> (o1.getRequestTime() >= o2.getRequestTime())? 1 : -1);
        job runningJob = null;

        for(int i=0; i<jobs.length; i++) {
            int requestTime = jobs[i][0];
            int processingTime = jobs[i][1];
            jobQ.add(new job(requestTime, processingTime));
        }

        int sum = 0;
        int time = 0;
        while (!jobQ.isEmpty() || !waitQ.isEmpty() || runningJob != null) {
            while(!jobQ.isEmpty() && jobQ.peek().getRequestTime() == time) {
                waitQ.add(jobQ.poll());
            }
            if (runningJob == null && !waitQ.isEmpty()) runningJob = waitQ.poll();
            if (runningJob != null && runningJob.isFinished()) {
                sum += (time - runningJob.requestTime);
                runningJob = null;
                if (!waitQ.isEmpty()) runningJob = waitQ.poll();
            }
            if (runningJob != null) runningJob.execute();
            time++;
        }
        answer = sum / jobs.length;
        return answer;
    }
}