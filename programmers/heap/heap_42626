public class heap_42626 {
    public static class heap {
        private int[] nodes;
        private int maxNodeCount;
        private int nextIdx;
        private int heapType;

        public heap(int[] arr, int n, int heapType) {
            this.nodes = new int[n];
            this.maxNodeCount = n;
            this.nextIdx = 0;
            this.heapType = heapType;

            for(int i=0; i<n; i++) {
                insert(arr[i]);
            }
        }

        public int insert(int data) {
            if (nextIdx < maxNodeCount) {
                nodes[nextIdx++] = data;
                bottomUpCheck();
                return 1;
            }
            return -1;
        }

        private void bottomUpCheck() {
            for(int childIdx = nextIdx - 1; childIdx > 0;) {
                int parentIdx=(childIdx-1)/2;

                if(validate(parentIdx, childIdx)) break;
                else {
                    swap(parentIdx, childIdx);
                    childIdx = parentIdx;
                }
            }
        }

        public int delete() {
            if (nextIdx == 0) return -1;
            int rootData = nodes[0];
            nodes[0] = nodes[--nextIdx];
            topDownCheck();
            return rootData;
        }

        private void topDownCheck() {
            for(int parentIdx=0; parentIdx < nextIdx;) {
                int leftChildIdx = getLeftChildIdx(parentIdx);
                int rightChildIdx = getRightChildIdx(parentIdx);

                int nextParentIdx = getParentIdxFromChilds(parentIdx, leftChildIdx, rightChildIdx);
                if (nextParentIdx != -1) {
                    swap(parentIdx, nextParentIdx);
                    parentIdx = nextParentIdx;
                } else break;
            }
        }

        private int getLeftChildIdx(int parentIdx) {
            int leftIdx = 2 * parentIdx + 1;
            if (leftIdx < nextIdx) return leftIdx;
            else return -1;
        }

        private int getRightChildIdx(int parentIdx) {
            int rightIdx = 2 * parentIdx + 2;
            if (rightIdx < nextIdx) return rightIdx;
            else return -1;
        }

        private int getParentIdxFromChilds(int parentIdx, int leftChildIdx, int rightChildIdx) {
            int candidateIdx = -1;

            if (leftChildIdx == -1 && rightChildIdx == -1) return -1;
            else if (leftChildIdx != -1 && rightChildIdx == -1) candidateIdx = leftChildIdx;
            else if (leftChildIdx == -1 && rightChildIdx != -1) candidateIdx = rightChildIdx;
            else {
                if (this.heapType == 0) {
                    candidateIdx = (nodes[leftChildIdx] <= nodes[rightChildIdx])? leftChildIdx : rightChildIdx;
                }
                else candidateIdx = (nodes[leftChildIdx] >= nodes[rightChildIdx])? leftChildIdx : rightChildIdx;
            }

            if(!validate(parentIdx, candidateIdx)) return candidateIdx;
            return -1;
        }

        private boolean validate(int parentIdx, int childIdx) {
            if (this.heapType == 0) { // min heap
                return nodes[parentIdx] < nodes[childIdx];
            } else { // max heap
                return nodes[parentIdx] > nodes[childIdx];
            }
        }


        private void swap(int parentIdx, int childIdx) {
            int temp = nodes[parentIdx];
            nodes[parentIdx] = nodes[childIdx];
            nodes[childIdx] = temp;
        }

        public boolean isEmpty() {
            return nextIdx == 0;
        }

        public int peek() {
            if (this.nextIdx != 0) return nodes[0];
            return -1;
        }
    }

    public static int solution(int[] scoville, int K) {
        heap scovilleHeap = new heap(scoville, scoville.length, 0);
        int answer = 0;
        while(!scovilleHeap.isEmpty() && scovilleHeap.peek() < K) {
            int topMinimum = scovilleHeap.delete();
            int secondMinimum = scovilleHeap.delete();

            if (topMinimum == -1 || secondMinimum == -1) {
                break;
            }

            int fusionSpicy = topMinimum + secondMinimum * 2;
            scovilleHeap.insert(fusionSpicy);
            answer++;
        }
        if (!scovilleHeap.isEmpty() && scovilleHeap.peek() >= K) return answer;
        else return -1;
    }
    public static void main(String[] args) {
        int[] scoville = {1,3,2,4,5,2,3};
        int K = 100;

        int result1 = solution(scoville, K);
        System.out.println(result1);
    }
}
