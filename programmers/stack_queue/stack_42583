package Problem;

import java.util.LinkedList;
import java.util.Queue;

public class stack_42583 {
    public static class truckInfo {
        private final int outTime;
        private final int weight;

        public truckInfo(int outTime, int weight) {
            this.outTime = outTime;
            this.weight = weight;
        }

        public int getOutTime() {
            return outTime;
        }

        public int getWeight() {
            return weight;
        }
    }
    public static void main(String[] args) {
        int bridge_length = 100;
        int weight = 100;
        int[] truck_weights = {10,10,10,10,10,10,10,10,10,10};

        int answer = solution1(bridge_length, weight, truck_weights);
        System.out.println(answer);
    }

    public static int solution1(int bridge_length, int weight, int[] truck_weights) {  // success
        Queue<truckInfo> truckOnBridge = new LinkedList<>();
        int nextTruck = 0;
        int truckWeightsOnBridge = 0;
        int time = 0;
        while (nextTruck < truck_weights.length || !truckOnBridge.isEmpty()) {
            time++;
            if (!truckOnBridge.isEmpty() && truckOnBridge.peek().getOutTime() == time) {
                truckWeightsOnBridge -= truckOnBridge.poll().weight;
            }
            if (nextTruck < truck_weights.length && truckWeightsOnBridge + truck_weights[nextTruck] <= weight) {
                truckInfo newTruck = new truckInfo(time + bridge_length, truck_weights[nextTruck]);
                truckOnBridge.add(newTruck);

                truckWeightsOnBridge += truck_weights[nextTruck];
                nextTruck++;
            }
        }

        return time;
    }
}
